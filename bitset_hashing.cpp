#include <bitset>
#include <iostream>
#include <unordered_map>
#include <random>
// #include <cmath>

using std::bitset;
using std::unordered_map;
using std::cout;
using std::endl;

uint64_t hash(bitset<722> board)
{
    uint64_t result = 0;
	uint64_t mask = 1;

    for (int chunk = 0; chunk < 14; chunk++)
    {;
        for (int i = 0; i < 64; i++)
		{
			if (board[i])
				result ^= mask;
			mask <<= 1;
		}
		result *= (chunk + 1);
		// cout << result << "   " << endl;
        board >>= 64;
		mask = 1;
		// cout << board << endl;
    }
    return result;
}



int	main()
{
	bitset<722> board
   bitset<722> board
	// bitset<722> board(0);
	// bitset<465> test = 3459236829769268671LLU;
	unordered_map<bitset<722>, int> table;

	// test.to_ulong();
	// cout << "?" << endl;
	    // std::hash<std::bitset<722>> hash_1;
	// for (int i = 0; i < 1000000; i++)
	// {
	// 	int number = (rand() % 200) + 300;
	// 	board[number] = board[number] ? 0 : 1;
	// 	table.insert({board, rand()});
	// 	// std::cout << hash_1(board) << std::endl;
	// }

	std::hash<std::bitset<722>> fn;

	cout << (fn(board) == fn(board2)) << endl;

	// cout << uint64_t(uint64_t(14658090887184121856) * uint64_t(14658090887184121856)) << endl;
	// cout << uint64_t(uint64_t(15745874368024018944) * uint64_t(15745874368024018944)) << endl;

	    for(size_t bucket = 0; bucket < table.bucket_count(); bucket++)
        	std::cout << table.bucket_size(bucket) << std::endl;

	// cout << result << endl;

	return 0;
}

